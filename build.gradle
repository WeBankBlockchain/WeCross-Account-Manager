plugins {
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'org.ajoberstar.grgit' version '4.0.1'
}


// Apply the java-library plugin to add support for Java Library
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
//apply plugin: 'war'
apply plugin: 'jacoco'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.

    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://maven.aliyun.com/repository/public' }
    mavenCentral()
}

sourceCompatibility = 1.8
version '1.3.0'

def log4j_version = "2.19.0"
List logger = [
        "org.apache.logging.log4j:log4j-api:$log4j_version",
        "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
]

dependencies {
    compile logger
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    compile 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    compile ('com.moandjiezana.toml:toml4j:0.7.2') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    compile 'com.google.code.gson:gson:2.8.9'
    compile ('org.springframework.boot:spring-boot-starter-web:2.6.14')
    compile 'org.springframework.boot:spring-boot-starter-security:2.6.14'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.14'
    compile 'mysql:mysql-connector-java:8.0.32'
    compile 'com.h2database:h2:2.1.214'
    compile 'com.auth0:java-jwt:3.19.1'
    compile 'io.netty:netty-all:4.1.86.Final'
    compile 'org.bouncycastle:bcprov-jdk15on:1.69'
    compile 'com.alibaba:druid:1.2.9'
    compile 'commons-codec:commons-codec:1.15'
    compile 'javax.mail:mail:1.4.7'
    configurations.compile.exclude(group: 'ch.qos.logback')
    configurations.compile.exclude(group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.7'
}

sourceSets {
    main {
        resources {
            //exclude 'contracts/*'
        }
    }
}

googleJavaFormat {
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
    exclude '**/temp/*.java'
}

verifyGoogleJavaFormat {
    source = sourceSets*.allJava
    include '**/*.java'
    exclude '**/temp/*.java'
}


jar {
    destinationDir file('dist/apps')
    archiveName project.name + "-" + project.version + '.jar'
    exclude '**/*.xml'
    exclude '**/*.toml'
    exclude '**/*.properties'
    exclude '**/*.yml'
    exclude '**/*.crt'
    exclude '**/*.key'
    exclude '**/*.sql'
    exclude '**/*.pem'

    manifest {
        try {
            def repo = grgit.open(dir: file('.').canonicalPath)
            if (repo != null) {
                def date = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                def branch = repo.branch.getCurrent().getName()
                def commit = repo.head().getAbbreviatedId(40)

                attributes(["Implementation-Timestamp": date,
                            "Git-Branch"              : branch,
                            "Git-Commit"              : commit
                ])

                logger.info("  Commit : ")
                logger.info("  => date: {}", date)
                logger.info("  => branch: {}", branch)
                logger.info("  => commit: {}", commit)
            }
        } catch (Exception e) {
            // logger.warn(' .git not exist, cannot found commit info')
        }
    }

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
        copy {
            from file('scripts/')
            into 'dist'
        }
    }
}


test {
    testLogging.showStandardStreams = true
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    exclude group: 'org.yaml', module: 'snakeyaml'
}