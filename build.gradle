plugins {
    id 'com.github.sherter.google-java-format' version '0.8'
}


// Apply the java-library plugin to add support for Java Library
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
//apply plugin: 'war'
apply plugin: 'jacoco'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.

    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://dl.bintray.com/ethereum/maven/' }
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
}

sourceCompatibility = 1.8
version '1.0.0-rc5-SNAPSHOT-0903'


dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    
    compile 'com.fasterxml.jackson.core:jackson-databind:2.11.0'
    compile 'com.moandjiezana.toml:toml4j:0.7.2'
    compile 'org.springframework.boot:spring-boot-starter-web:2.1.13.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:2.1.13.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.1.13.RELEASE'
    compile 'mysql:mysql-connector-java:8.0.21'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'
    compile 'com.auth0:java-jwt:3.10.3'
    compile 'io.netty:netty-all:4.1.47.Final'
    compile 'org.bouncycastle:bcprov-jdk15on:1.60'
    compile 'commons-codec:commons-codec:1.14'
    configurations.compile.exclude(group: 'ch.qos.logback')
    configurations.compile.exclude(group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.1.13.RELEASE'
}

sourceSets {
    main {
        resources {
            //exclude 'contracts/*'
        }
    }
}

googleJavaFormat {
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
    exclude '**/temp/*.java'
}

verifyGoogleJavaFormat {
    source = sourceSets*.allJava
    include '**/*.java'
    exclude '**/temp/*.java'
}


jar {
    destinationDir file('dist/apps')
    archiveName project.name + "-" + project.version + '.jar'
    exclude '**/*.xml'
    exclude '**/*.toml'
    exclude '**/*.properties'
    exclude '**/*.yml'
    exclude '**/*.crt'
    exclude '**/*.key'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
        copy {
            from file('scripts/')
            into 'dist'
        }
    }
}


test {
    testLogging.showStandardStreams = true
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
